)
}
combined_df <- csv_files %>%
map_dfr(read_csv_with_fallback)
View(combined_df)
parquet_path <- readline(prompt = "Enter the path where you want to save the combined Parquet file: ")
write_parquet(combined_df, sink = file.path(parquet_path, "combined.parquet"))
partitioned_path <- readline(prompt = "Enter the path where you want to save the partitioned Parquet files: ")
if (!"state" %in% colnames(combined_df)) {
stop("The 'state' column is not present in the dataset. Check your CSV files.")
}
combined_df %>%
group_by(state) %>%
write_dataset(
path = partitioned_path,
format = "parquet",
partitioning = "state"
)
parquet_files <- list.files(
path = partitioned_path,
pattern = "\\.parquet$",
full.names = TRUE,
recursive = TRUE
)
library(arrow)
library(tidyverse)
csv_dir <- readline(prompt = "Enter the path to the folder containing the unzipped CSV files: ")
csv_files <- list.files(path = csv_dir, pattern = "\\.csv$", full.names = TRUE)
read_csv_with_fallback <- function(file) {
read_csv(
file,
col_types = cols(.default = col_character())
)
}
combined_df <- csv_files %>%
map_dfr(read_csv_with_fallback)
parquet_path <- readline(prompt = "Enter the path where you want to save the combined Parquet file: ")
write_parquet(combined_df, sink = file.path(parquet_path, "combined.parquet"))
partitioned_path <- readline(prompt = "Enter the path where you want to save the partitioned Parquet files: ")
stop("The 'state' column is not present in the dataset. Check your CSV files.")
partitioned_path <- readline(prompt = "Enter the path where you want to save the partitioned Parquet files: ")
if (!"state" %in% colnames(combined_df)) {
stop("The 'state' column is not present in the dataset. Check your CSV files.")
}
combined_df %>%
group_by(state) %>%
write_dataset(
path = partitioned_path,
format = "parquet",
partitioning = "state"
)
parquet_files <- list.files(
path = partitioned_path,
pattern = "\\.parquet$",
full.names = TRUE,
recursive = TRUE
)
partioned_dataset <- open_dataset(parquet_files, format = "parquet")
library(arrow)
library(tidyverse)
csv_dir <- readline(prompt = "Enter the path to the folder containing the unzipped CSV files: ")
csv_files <- list.files(path = csv_dir, pattern = "\\.csv$", full.names = TRUE)
read_csv_with_fallback <- function(file) {
read_csv(
file,
col_types = cols(.default = col_character())
)
}
combined_df <- csv_files %>%
map_dfr(read_csv_with_fallback)
parquet_path <- readline(prompt = "Enter the path where you want to save the combined Parquet file: ")
write_parquet(combined_df, sink = file.path(parquet_path, "combined.parquet"))
partitioned_path <- readline(prompt = "Enter the path where you want to save the partitioned Parquet files: ")
if (!"state" %in% colnames(combined_df)) {
stop("The 'state' column is not present in the dataset. Check your CSV files.")
}
combined_df %>%
group_by(state) %>%
write_dataset(
path = partitioned_path,
format = "parquet",
partitioning = "state"
)
parquet_files <- list.files(
path = partitioned_path,
pattern = "\\.parquet$",
full.names = TRUE,
recursive = TRUE
)
partioned_dataset <- open_dataset(parquet_files, format = "parquet")
print(partioned_dataset)
comparison_partitioned_non_partitioned <- function(state_name, csv_data, partitioned_path) {
#Non partitioned CSV
csv_arrow_table <- as_arrow_table(csv_data)
start_non_partitioned <- Sys.time()
non_partitioned_summary <- csv_arrow_table %>%
filter(state == state_name) %>%
group_by(scope_severity) %>%
summarise(num_deficiencies = n(), .groups = "drop")
end_non_partitioned <- Sys.time()
time_non_partitioned <- end_non_partitioned - start_non_partitioned
# Partitioned Parquet
start_partitioned <- Sys.time()
state_partition_path <- file.path(partitioned_path, paste0("state=", state_name))
partitioned_data <- open_dataset(state_partition_path, format = "parquet")
partitioned_summary <- partitioned_data %>%
group_by(scope_severity) %>%
summarise(num_deficiencies = n(), .groups = "drop")
end_partitioned <- Sys.time()
time_partitioned <- end_partitioned - start_partitioned
time_difference <- time_non_partitioned - time_partitioned
cat("Time using non-partitioned data:", time_non_partitioned, "seconds\n")
cat("Time using partitioned data:", time_partitioned, "seconds\n")
cat("Time difference:", time_difference, "seconds\n")
list(
non_partitioned_summary = non_partitioned_summary,
partitioned_summary = partitioned_summary
)
}
sample_test <- comparison_partitioned_non_partitioned(
state_name = "UT",
csv_data = combined_df,
partitioned_path = partitioned_path
)
sample_test <- comparison_partitioned_non_partitioned(
state_name = "AK",
csv_data = combined_df,
partitioned_path = partitioned_path
)
sample_test <- comparison_partitioned_non_partitioned(
state_name = "GA",
csv_data = combined_df,
partitioned_path = partitioned_path
)
unique_states <- unique(combined_df$state)
results <- data.frame(
state = character(),
num_observations = numeric(),
speed_ratio = numeric(),
stringsAsFactors = FALSE
)
for (state_name in unique_states) {
csv_arrow_table <- as_arrow_table(combined_df)
start_non_partitioned <- Sys.time()
filtered_non_partitioned <- csv_arrow_table %>% filter(state == state_name)
non_partitioned_summary <- filtered_non_partitioned %>%
group_by(scope_severity) %>%
summarise(num_deficiencies = n(), .groups = "drop")
end_non_partitioned <- Sys.time()
time_non_partitioned <- as.numeric(end_non_partitioned - start_non_partitioned, units = "secs")
# Partitioned data
state_partition_path <- file.path(partitioned_path, paste0("state=", state_name))
start_partitioned <- Sys.time()
partitioned_data <- open_dataset(state_partition_path, format = "parquet")
filtered_partitioned <- partitioned_data %>%
group_by(scope_severity) %>%
summarise(num_deficiencies = n(), .groups = "drop")
end_partitioned <- Sys.time()
time_partitioned <- as.numeric(end_partitioned - start_partitioned, units = "secs")
num_observations <- nrow(as.data.frame(filtered_non_partitioned))
speed_ratio <- as.numeric(time_non_partitioned / time_partitioned)
results <- rbind(
results,
data.frame(
state = state_name,
num_observations = num_observations,
speed_ratio = speed_ratio
)
)
}
View(results)
View(results)
plot <- ggplot(results, aes(x = num_observations, y = speed_ratio)) +
geom_point() +
labs(
title = "Partitioned Speedup vs. Filtered Data Size",
x = "Number of Observations (Filtered Data)",
y = "Speed Improvement (Non-Partitioned Time / Partitioned Time)"
) +
theme_minimal()
png("scatter_plot_partitioned_speedup.png", width = 800, height = 600)
print(plot)
dev.off()
print(plot)
plot <- ggplot(results, aes(x = num_observations, y = speed_ratio)) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(
title = "Partitioned Speedup vs. Filtered Data Size",
x = "Number of Observations (Filtered Data)",
y = "Speed Improvement (Non-Partitioned Time / Partitioned Time)"
) +
theme_minimal()
png("scatter_plot_partitioned_speedup.png", width = 800, height = 600)
print(plot)
dev.off()
print(plot)
results <- results %>%
mutate(
time_non_partitioned = sapply(unique_states, function(state_name) {
start <- Sys.time()
csv_arrow_table <- as_arrow_table(combined_df)
csv_arrow_table %>% filter(state == state_name)
as.numeric(Sys.time() - start, units = "secs")
}),
time_partitioned = sapply(unique_states, function(state_name) {
start <- Sys.time()
state_partition_path <- file.path(partitioned_path, paste0("state=", state_name))
partitioned_data <- open_dataset(state_partition_path, format = "parquet")
partitioned_data %>% filter(state == state_name)
as.numeric(Sys.time() - start, units = "secs")
}),
time_difference = time_non_partitioned - time_partitioned
)
View(results)
## plot
plot <- ggplot(results, aes(x = num_observations)) +
geom_line(aes(y = time_non_partitioned, color = "Non-Partitioned Time"), size = 1) +
geom_line(aes(y = time_partitioned, color = "Partitioned Time"), size = 1) +
geom_line(aes(y = time_difference, color = "Time Difference"), size = 1) +
labs(
title = "Time Comparison: Partitioned vs Non-Partitioned Data",
x = "Number of Observations (Filtered Data)",
y = "Time (Seconds)",
color = "Legend"
) +
theme_minimal()
## plot
plot <- ggplot(results, aes(x = num_observations)) +
geom_line(aes(y = time_non_partitioned, color = "Non-Partitioned Time"), linewidth = 1) +
geom_line(aes(y = time_partitioned, color = "Partitioned Time"), linewidth = 1) +
geom_line(aes(y = time_difference, color = "Time Difference"), linewidth = 1) +
labs(
title = "Time Comparison: Partitioned vs Non-Partitioned Data",
x = "Number of Observations (Filtered Data)",
y = "Time (Seconds)",
color = "Legend"
) +
theme_minimal()
png("time_comparison_plot.png", width = 800, height = 600)
print(plot)
dev.off()
print(plot)
reticulate::repl_python()
reticulate::install_python(version = latest)
reticulate::repl_python()
reticulate::install_python(version = "3.11:latest")
reticulate::install_python(version = "3.13:latest")
import random
reticulate::repl_python()
import random
View(r)
retmylist = [
"apple", "brave", "crane", "drive", "eagle",
"fable", "grape", "house", "input", "joker",
retmylist = [
"apple", "brave", "crane", "drive", "eagle",
"fable", "grape", "house", "input", "joker",
"knife", "lemon", "mango", "nerve", "ocean"
]
print (retmylist)
def myfunction1(mylist, mynumber2):
mystring1 = random.choice(mylist).lower()
def myfunction1(mylist, mynumber2):
mystring1 = random.choice(mylist).lower()
mynumber1 = 0
print("Welcome!")
print(f"You have {mynumber2} attempts.")
def myfunction1(mylist, mynumber2):
mystring1 = random.choice(mylist).lower()
mynumber1 = 0
print("Welcome!")
print(f"You have {mynumber2} attempts.")
print("You have {mynumber2} attempts.")
def myfunction1(mylist, mynumber2):
mystring1 = random.choice(mylist).lower()
mynumber1 = 3
print("Welcome!")
print("You have {mynumber2} attempts.")
def myfunction1(mylist, mynumber2):
mystring1 = random.choice(mylist).lower()
mynumber1 = 0
print("Welcome!")
print("You have {mynumber2} attempts.")
while mynumber1 < mynumber2:
mystring2 = input("Enter your guess: ").lower().strip()
if len(mystring2) != 5 or not mystring2.isalpha():
print("Invalid input.")
continue
mynumber1 = mynumber1 + 1
if mystring2 == mystring1:
print(f"Congratulations! You won in {mynumber1} attempts.")
break
else:
mymessage = ''
for i in range(5):
if mystring2[i] == mystring1[i]:
mymessage = mymessage + mystring1[i]
else:
mymessage = mymessage + '_'
mynumber3 = mynumber2 - mynumber1
print(f"Wrong! Here's what you got right: {mymessage}")
print(f"You have {mynumber3} attempts left.")
if mynumber1 == mynumber2:
print(f"Sorry, you lost. The correct answer was: '{mystring1}'.")
myfunction1(mylist, 5)
def myfunction1(mylist, mynumber2):
mystring1 = random.choice(mylist).lower()
mynumber1 = 0
print("Welcome!")
print("You have {mynumber2} attempts.")
while mynumber1 < mynumber2:
mystring2 = input("Enter your guess: ").lower().strip()
if len(mystring2) != 5 or not mystring2.isalpha():
print("Invalid input.")
continue
mynumber1 = mynumber1 + 1
if mystring2 == mystring1:
print(f"Congratulations! You won in {mynumber1} attempts.")
break
else:
mymessage = ''
for i in range(5):
if mystring2[i] == mystring1[i]:
mymessage = mymessage + mystring1[i]
else:
mymessage = mymessage + '_'
mynumber3 = mynumber2 - mynumber1
print(f"Wrong! Here's what you got right: {mymessage}")
print(f"You have {mynumber3} attempts left.")
if mynumber1 == mynumber2:
print(f"Sorry, you lost. The correct answer was: '{mystring1}'.")
myfunction1(mylist, 5)
def myfunction1(mylist, mynumber2):
mystring1 = random.choice(mylist).lower()
mynumber1 = 0
print("Welcome!")
print("You have {mynumber2} attempts.")
print("Welcome!")
print("You have {mynumber2} attempts.")
while mynumber1 < mynumber2:
mystring2 = input("Enter your guess: ").lower().strip()
if len(mystring2) != 5 or not mystring2.isalpha():
print("Invalid input.")
continue
mynumber1 = mynumber1 + 1
if mystring2 == mystring1:
print(f"Congratulations! You won in {mynumber1} attempts.")
break
else:
mymessage = ''
for i in range(5):
if mystring2[i] == mystring1[i]:
mymessage = mymessage + mystring1[i]
else:
mymessage = mymessage + '_'
mynumber3 = mynumber2 - mynumber1
print(f"Wrong! Here's what you got right: {mymessage}")
print(f"You have {mynumber3} attempts left.")
if mynumber1 == mynumber2:
print(f"Sorry, you lost. The correct answer was: '{mystring1}'.")
myfunction1(mylist, 5)
def myfunction1(mylist, mynumber2):
mystring1 = random.choice(mylist).lower()
mynumber1 = 0
# This prints a welcome announcements and tells you how many attempts you have to guess the words
print("Welcome!")
print("You have {mynumber2} attempts.")
while mynumber1 < mynumber2:
mystring2 = input("Enter your guess: ").lower().strip()
if len(mystring2) != 5 or not mystring2.isalpha():
print("Invalid input.")
continue
mynumber1 = mynumber1 + 1
if mystring2 == mystring1:
print(f"Congratulations! You won in {mynumber1} attempts.")
break
else:
mymessage = ''
for i in range(5):
if mystring2[i] == mystring1[i]:
mymessage = mymessage + mystring1[i]
else:
mymessage = mymessage + '_'
mynumber3 = mynumber2 - mynumber1
print(f"Wrong! Here's what you got right: {mymessage}")
print(f"You have {mynumber3} attempts left.")
if mynumber1 == mynumber2:
print(f"Sorry, you lost. The correct answer was: '{mystring1}'.")
myfunction1(mylist, 5)
import random
quit
reticulate::source_python('~/GitHub/problem-set-4-JSerr2/program.py')
reticulate::repl_python()
import random
# creates a list of five letter words
retmylist = [
"apple", "brave", "crane", "drive", "eagle",
retmylist = [
"apple", "brave", "crane", "drive", "eagle",
"fable", "grape", "house", "input", "joker",
"knife", "lemon", "mango", "nerve", "ocean"
]
print (retmylist)
# Creates a function which takes two inputs, a random word from the list and the maximum number of words allowed for the player to guess the correct word.
def myfunction1(mylist, mynumber2):
mystring1 = random.choice(mylist).lower()
mynumber1 = 0
print("Welcome!")
print("You have {mynumber2} attempts.")
print("Welcome!")
print("You have {mynumber2} attempts.")
while mynumber1 < mynumber2:
mystring2 = input("Enter your guess: ").lower().strip()
if len(mystring2) != 5 or not mystring2.isalpha():
print("Invalid input.")
continue
mynumber1 = mynumber1 + 1
if mystring2 == mystring1:
print(f"Congratulations! You won in {mynumber1} attempts.")
break
else:
mymessage = ''
for i in range(5):
if mystring2[i] == mystring1[i]:
mymessage = mymessage + mystring1[i]
else:
mymessage = mymessage + '_'
mynumber3 = mynumber2 - mynumber1
print(f"Wrong! Here's what you got right: {mymessage}")
print(f"You have {mynumber3} attempts left.")
if mynumber1 == mynumber2:
print(f"Sorry, you lost. The correct answer was: '{mystring1}'.")
while mynumber1 < mynumber2:
mystring2 = input("Enter your guess: ").lower().strip()
if len(mystring2) != 5 or not mystring2.isalpha():
print("Invalid input.")
continue
mynumber1 = mynumber1 + 1
if mystring2 == mystring1:
print(f"Congratulations! You won in {mynumber1} attempts.")
break
else:
mymessage = ''
for i in range(5):
if mystring2[i] == mystring1[i]:
mymessage = mymessage + mystring1[i]
else:
mymessage = mymessage + '_'
mynumber3 = mynumber2 - mynumber1
print(f"Wrong! Here's what you got right: {mymessage}")
print(f"You have {mynumber3} attempts left.")
if mynumber1 == mynumber2:
print(f"Sorry, you lost. The correct answer was: '{mystring1}'.")
myfunction1(mylist, 5)
myfunction1(mylist, 5)
quit
mylist <- c("apple", "brave", "crane", "drive", "eagle", "fable", "grape",
"house", "input", "joker", "knife", "lemon", "mango", "nerve", "ocean")
myfunction <- function(mylist, mynumnber2){
mystring1 <- sample(mylist, 1)
mynumber <- 0
}
cat("Welcome!\n")
cat(sprintf("You have %d attempts. \n", mynumber2))
myfunction <- function(mylist, mynumnber2){
mystring1 <- sample(mylist, 1)
mynumber <- 0
}
cat("Welcome!\n")
cat(sprintf("You have %d attempts. \n", mynumber2))
mylist <- c(
"apple", "brave", "crane", "drive", "eagle",
"fable", "grape", "house", "input", "joker",
"knife", "lemon", "mango", "nerve", "ocean"
)
myfunction1 <- function(mylist, mynumber2) {
mystring1 <- sample(mylist, 1)
mynumber1 <- 0
cat("Welcome!\n")
cat(sprintf("You have %d attempts.\n", mynumber2))
while (mynumber1 < mynumber2) {
cat("Enter your guess: ")
mystring2 <- tolower(trimws(readline()))
if (nchar(mystring2) != 5 || !grepl("^[a-zA-Z]+$", mystring2)) {
cat("Invalid input.\n")
next
}
mynumber1 <- mynumber1 + 1
if (mystring2 == mystring1) {
cat(sprintf("Congratulations! You won in %d attempts.\n", mynumber1))
break
} else {
mymessage <- ""
for (i in 1:5) {
if (substr(mystring2, i, i) == substr(mystring1, i, i)) {
mymessage <- paste0(mymessage, substr(mystring1, i, i))
} else {
mymessage <- paste0(mymessage, "_")
}
}
mynumber3 <- mynumber2 - mynumber1
cat(sprintf("Wrong! Here's what you got right: %s\n", mymessage))
cat(sprintf("You have %d attempts left.\n", mynumber3))
}
}
if (mynumber1 == mynumber2) {
cat(sprintf("Sorry, you lost. The correct answer was: '%s'.\n", mystring1))
}
}
myfunction1(mylist, 5)
myfunction1(mylist, 7)
